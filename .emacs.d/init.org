* Emacs
  More interesting settings in http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php and https://github.com/dz/dotfiles/tree/master/emacsd/configs
  Common problems with Emacs can be solve by removing the .elc (compiled files) and recompiling them with byte-recompile-directory. For just one file we can use byte-compile-file.

  Check for more seetings in: http://www.i3s.unice.fr/~malapert/org/tips/emacs_orgmode.html
  
** .emacs main content
   The .emacs file at ~ will trigger the load and conversion of the init.org file and should contain the code below in the begginning.
   Further lines will be added automatically by other packages.

   #+BEGIN_SRC 
   (package-initialize)

   (setq user-emacs-directory (expand-file-name "~/.emacs.d/"))

   (require 'org)
   (org-babel-load-file (expand-file-name (concat user-emacs-directory "init.org")))
   #+END_SRC
  
** Repositories
 Instructions at https://stable.melpa.org/#/getting-started


 #+BEGIN_SRC emacs-lisp
; list the packages you want
(setq package-list '(use-package beacon company ess helm yasnippet magit))

; list the repositories containing them
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

 #+END_SRC

** Visuals & Sound

#+BEGIN_SRC emacs-lisp

;; Start with a maximized window
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Text size mimics the gnome-terminal shortcuts
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;; Set sound warnings off
(setq visible-bell 1)

(setq inhibit-splash-screen t)

(use-package beacon
    :config
    (beacon-mode 1)
    (setq beacon-blink-delay 0.2)
    (setq beacon-blink-duration 0.2)
    (setq beacon-blink-when-point-moves 7)
    (setq beacon-blink-when-window-changes nil)
    (setq beacon-blink-when-window-scrolls nil)
    (setq beacon-color "brown")
    (setq beacon-push-mark 5)
    (setq beacon-size 25)
)

;; graphical mode vs terminal mode settings
(unless (display-graphic-p) (menu-bar-mode -1))
(if (display-graphic-p)
    (progn
      (tool-bar-mode -1)
      (scroll-bar-mode -1)))

(when (display-graphic-p) 
      (setq frame-title-format
            '("Emacs - " (buffer-file-name "%f"
	    (dired-directory dired-directory "%b"))))

      (set-background-color "#00005f") ;; darkblue
      (set-background-color "black")
      (set-foreground-color "white")

      ;; Set transparency of emacs when graphical mode
      ;; Use each particular terminal settings otherwise
      (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
      (add-to-list 'default-frame-alist '(alpha . (85 . 50)))
      (defun transparency (value)
             "Sets the transparency of the frame window. 0=transparent/100=opaque"
	     (interactive "nTransparency Value 0 - 100 opaque:")
	     (set-frame-parameter (selected-frame) 'alpha value))
)


#+END_SRC

** Text Input
*** spanish-prefix-quote
#+BEGIN_SRC emacs-lisp
(quail-define-package
 "spanish-prefix-quote" "Spanish" "ES>" t
 "Spanish (Español) input method with prefix modifiers. 
  
  This is a modification and expansion of the default spanish-prefix 
  input method where the ~ has no role and is replaced by ' instead.
  
  Also, the guillemets or 'comillas latinas' have as a prefix
  the < and > symbols.

  This modification makes it easier to type in Spanish when using
  English based keyboards.

      effect    | prefix | examples
 ---------------+--------+----------
      tilde     |   \\='    | \\='a -> á
    exlamación  |   \\='    | \\='! -> ¡
  interrogación |   \\='    | \\='? -> ¿
     diéresis   |   \"    | \"u -> ü
       eñe      |   \\='    | \\='n -> ñ
    guillemets  | < or > | >> -> »  << -> «   
    guillemets  | < or > | >> -> »  << -> «   
 raya (em dash) |   -    | -- -> —

" nil t nil nil nil nil nil nil nil nil t)

(quail-define-rules
 ("'A" ?Á)
 ("'E" ?É)
 ("'I" ?Í)
 ("'O" ?Ó)
 ("'U" ?Ú)
 ("'a" ?á)
 ("'e" ?é)
 ("'i" ?í)
 ("'o" ?ó)
 ("'u" ?ú)
 ("' " ?')
 ("\"U" ?Ü)
 ("\"u" ?ü)
 ("\" " ?\")
 ("'N" ?Ñ)
 ("NN" ?Ñ)
 ("'n" ?ñ)
 ("nn" ?ñ)
 (">>" ?\»)
 ("> " ?>)
 ("<<" ?\«)
 ("< " ?<)
 ("'!" ?¡)
 ("'?" ?¿)
 ("--" ?—)
 ("- " ?-)
 )

#+END_SRC
*** Spelling
    Placing =-*- ispell-local-dictionary: "spanish" -*-= at the beggining of the file loads the aspell dictionary to be used by flyspell.
#+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC

*** Other
#+BEGIN_SRC emacs-lisp
;;  Marking Mispellings
;;  (global-font-lock-mode t)
;;  (custom-set-faces
;;    '(flyspell-incorrect ((t (:inverse-video t)))))
;;  ;;  (set-face-attribute 'flyspell-incorrect (t (:inverse-video t)))
#+END_SRC

*** Settings
#+BEGIN_SRC emacs-lisp
;; Input Mode to allow Spanish ways in an english layout
;; WARNING: When pasting code like lisp (or anything else)
;;          containing things like 'a will be pasted as á.
(add-hook 'text-mode-hook
	  (lambda () (set-input-method "spanish-prefix-quote")))
#+END_SRC

** Layouts
#+BEGIN_SRC emacs-lisp
(defun book-layout()
   (interactive)
   (clone-indirect-buffer-other-window nil t)
   (enlarge-window-horizontally 50)
   (global-visual-line-mode t)
)

(global-set-key (kbd "C-c f b") 'book-layout)

;; Wrapping lines
;; (global-visual-line-mode t)

;; To force wrap text lines at a set width 
;; (add-hook 'text-mode-hook
;;           '(lambda() (turn-on-auto-fill) (set-fill-column 80)))

#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp

;; Load initiailzation file 
(global-set-key (kbd "C-c i") 
(lambda() (interactive)(org-babel-load-file "~/.emacs.d/init.org")))


;; Store all backup *~ and autosave #*# files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

* Org Mode
  #+BEGIN_SRC emacs-lisp
   ;; http://orgmode.org/manual/Installation.html
   ;; http://orgmode.org/guide/Activation.html#Activation

   ;; check OS type
   (cond
   ((string-equal system-type "windows-nt") (progn (setq org-directory "~/workspace/org")))
   ((string-equal system-type "darwin") (progn (message "Set org-directory for Mac OS X")))
   ((string-equal system-type "gnu/linux") (progn (setq org-directory "~/workspace/org"))))

   (add-hook 'org-mode-hook (global-visual-line-mode t))
  #+END_SRC

** Key Mapping
   #+BEGIN_SRC emacs-lisp
   ;; The following lines are always needed.  Choose your own keys.

   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-ca" 'org-agenda)
   (global-set-key "\C-cc" 'org-capture)
   (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC

** Agenda
   #+BEGIN_SRC emacs-lisp
   ;; (setq org-icalendar-timezone "Europe/Prague")
   ;; C-h v org-icalendar-use-UTC-date-time for details
   ;; Using UTC format is globally is advice since many calendar apps can
   ;; update its value easily. It works in Google & Yahoo web calendars.
   ;; warning: Google calendar updates daily and does not allow for manual refresh.

   (setq org-icalendar-date-time-format ":%Y%m%dT%H%M%SZ")
   (setq org-agenda-default-appointment-duration 30)
   (setq org-icalendar-alarm-time 120)

   ;; Check http://orgmode.org/manual/Template-expansion.html#Template-expansion

   ;; Check more settings described in Blog
   ;; https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
   (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
   (setq org-enforce-todo-dependencies t)
   (setq org-log-done (quote time))

   ;; (defun fran-update-agenda ()
   ;;   (interactive)
   ;;   (shell-command "cd ~/workspace/org/sync; mv ../agenda.ics .; git commit -a -m 'update'; git push"))
   ;; (global-set-key (kbd "C-c f") 'fran-update-agenda)  
   #+END_SRC

** Captures
   #+BEGIN_SRC emacs-lisp
   ;; Personal Captures
   ;; ("l" "Log" plain (file+datetree "log.org")
   ;; "    %?\n    Anno Domini %(progn (require 'rst) (rst-arabic-to-roman %<%Y>)) %<%H:%M>\n" :empty-lines 1)

   (setq org-capture-templates
	 '(
 	   ("t" "Todo" entry (file+headline "agenda.org" "Tasks")
	    "* TODO [#A] %?\n  %i\n  %a")
	   ("c" "Calendar" entry (file+headline "agenda.org" "Calendar")
	    "* %?\n  %T\n %i\n %A")
	   ("r" "Random" entry (file "random.org")
	    "* %?\n  %U\n %i\n  %a")
	   ("j" "Journal" plain (file+datetree "journal.gpg")
	    "    %?\n    %U\n" :empty-lines 1)
	   ("i" "Ideas" entry (file "ideas.org")
	    "* IDEA [#A] %?\n  %U\n %i\n  %a")
	   ("p" "Proyecto" plain (file+headline "proyecto.org.gpg" "Diario")
	    "    %?\n    %U\n" :empty-lines 1)
   ))
   #+END_SRC

** Programming Languages 

#+BEGIN_SRC emacs-lisp

;; for windows the Path env variable must have the folder with python.exe
;; for windows the org-babel-R-command must be set
;; http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html

;; Set just for windows
;;(setq org-babel-R-command "C:/Progra~1/R/R-3.4.1/bin/x64/R --slave --no-save")

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (python . t)
   (C . t)
   (R . t)
   (org . t)
   ))
(setq org-src-preserve-indentation t)

#+END_SRC

*** R
To use this type <r and then TAB. This creates an R block for textual output.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("r" "#+begin_src R :results output :session *R* :exports both\n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

To use this type <R and then TAB. This creates an R block for graphics that are stored in the /tmp/.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("R" "#+begin_src R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 800 :height 600 :session *R* \n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

To use this type <RR and then TAB. This creates an R block for graphics that are stored in the directory of the current file.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("RR" "#+begin_src R :results output graphics :file  (org-babel-temp-file (concat (file-name-directory (or load-file-name buffer-file-name)) \"figure-\") \".png\") :exports both :width 800 :height 600 :session *R* \n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

*** python

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
'("p" "#+begin_src python :results output :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))


(add-to-list 'org-structure-template-alist
'("P" "#+begin_src python :results output :session *python* :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))

#+END_SRC

*** Maxima

#+BEGIN_SRC emacs-lisp
;;-- Maxima mode
(add-to-list 'load-path "/usr/share/maxima/5.37.2/emacs")
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)
(add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))
#+END_SRC
    

*** Maxima

#+BEGIN_SRC emacs-lisp
;;-- Maxima mode
(add-to-list 'load-path "/usr/share/maxima/5.37.2/emacs")
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)
(add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))
#+END_SRC
    
* Aspell
#+BEGIN_SRC emacs-lisp
;; Windows specific settings
(when (memq system-type '(windows-nt ms-dos))
  (progn 
  (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin")
  (setq ispell-program-name "aspell")
  (setq ispell-personal-dictionary "~/.ispell")
  (require 'ispell))
)
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action);; to use <tab> with its default behaviour
(global-set-key (kbd "M-i") 'helm-swoop) ;; C-x C-e to evaluate	  
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; set bookmark C-x r m
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring) 
(global-set-key (kbd "C-x C-f") 'helm-find-files) 

(with-eval-after-load 'helm
  (define-key helm-map (kbd "C-c p") 'ignore)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action))
#+END_SRC

* Org2Blog
#+BEGIN_SRC emacs-lisp
;; (require 'auth-source) 
;;  (add-to-list 'auth-sources "~/.authinfo.gpg")
  (setq org2blog/wp-blog-alist
      `(("wordpress"
         :url "https://aleadeum.wordpress.com/xmlrpc.php"
         ;; :username ,(car (auth-source-user-and-password "aleadeum"))
	 ;; :password ,(cadr (auth-source-user-and-password "aleadeum"))
         :default-title "Title"
         :default-categories ("Uncategorized")
         :tags-as-categories nil)))

#+END_SRC
* Abbreviations
  To allow global activation of abbreviations we could activate the following code, however the Emacs package Yasnippet is far superior to the default abbrev functionality in Emacs.

#+BEGIN_SRC 
;; -*- coding: utf-8; lexical-binding: t; -*-

(set-default 'abbrev-mode t)
(setq save-abbrevs nil)

(clear-abbrev-table global-abbrev-table)
(define-abbrev-table 'global-abbrev-table
  '(

    ;; net abbrev
    ("afaik" "as far as i know" )
    ("atm" "at the moment" )
    ("ty" "thank you" )
    ("btw" "by the way" )
    
    ;; english word abbrev
    ("bc" "because" )
    ("bg" "background" )
    ("math" "mathematics" )

    ;; unicode
    ("hearts" "♥💕💓💔💖💗💘💝💞💟💙💚💛💜" )

    ;; url
    ("urlemacs" "http://ergoemacs.org/" )

    ;;
    ))
#+END_SRC

* Latex
  Scaling latex formulas when visualized via C-cxl
#+BEGIN_SRC 
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

* Magit

  A tutorial can be found [[https://magit.vc/screenshots/][here]]

  Execute magit-status or C-x q then:
  - S stages all files
  - c c initiates a commit. Write the message and then press C-c C-c to actually create the commit.
  - P u pushes to the upstream branch. In the popup that appears after you have pressed P you can see the upstream. If the upstream is not set yet, then you can still use P u. You'll be asked for a branch which is then configured as the upstream before pushing.

#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories
      `(("~/"                               . 1)
	("~/workspace/"                     . 3)
        (,user-emacs-directory              . 2)))

#+END_SRC
* ESS
#+BEGIN_SRC emacs-lisp
(require 'ess-site)
(add-hook 'ess-mode-hook
          (lambda () 
            (ess-toggle-underscore nil)))
;; (eval-after-load  "ess-mode" '(ess-toggle-underscore nil))
;; Turn off "smart underscore" ess feature
;; (with-eval-after-load 'ess (setq ess-toggle-underscore nil))
;;;; Map C-= to the assignment operator, and leaves _ alone:
;; (add-hook 'ess-mode-hook
;; 	  (lambda ()
;; 	           (setq ess-S-assign-key (kbd "C-="))
;; 	           (ess-toggle-S-assign-key t)     ; enable above key definition
;; 		   (ess-toggle-underscore nil)
;; 		   (ess-toggle-underscore nil)))   ; leave my underscore key alone!

;; (add-hook 'inferior-ess-mode-hook
;; 	  (lambda ()
;; 	    (ess-toggle-underscore nil)
;; 	           (setq ess-S-assign-key (kbd "C-="))
;; 	           (ess-toggle-S-assign-key t)     ; enable above key definition
;; 		   (ess-toggle-underscore nil)
;; 		   (ess-toggle-underscore nil)))   ; leave my underscore key alone!

#+END_SRC  

* Python
  Variables defined in python.el and required to run anaconda's python

#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/anaconda3/bin/python")
    (setq python-shell-interpreter "~/anaconda3/bin/python")
    (setq python-shell-interpreter "~/.conda/envs/fran-env/bin/python"))
(if (file-exists-p "/databricks/python3/bin/python3")
    (setq python-shell-interpreter "/databricks/python3/bin/python3")

;;(setq python-shell-interpreter-args "-m IPython --simple-prompt -i")
#+END_SRC

* Company Mode
#+BEGIN_SRC emacs-lisp

(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

(define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
(define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)

(custom-set-faces
 '(company-preview
   ((t (:foreground "darkgray" :underline t))))
 '(company-preview-common
   ((t (:inherit company-preview))))
 '(company-tooltip
   ((t (:background "lightgray" :foreground "black"))))
 '(company-tooltip-selection
   ((t (:background "steelblue" :foreground "white"))))
 '(company-tooltip-common
   ((((type x)) (:inherit company-tooltip :weight bold))
    (t (:inherit company-tooltip))))
 '(company-tooltip-common-selection
   ((((type x)) (:inherit company-tooltip-selection :weight bold))
    (t (:inherit company-tooltip-selection)))))

#+END_SRC

* Yasnippet
  We need to add your own yasnippets for ESS/R for any yasnippet expansion to work. By default there are none. When typing rnorm(<TAB> the result we see has nothing to do with yasnippet, this is behavior that ESS provides to make your R-coding-life easier.

  We need to create your own snippets for R. You need to do this if the folder ess-mode in the [[/home/fran/Dropbox/.emacs.d/snippets][snippets directory]] or wherever your yasnippets are located (we'll have to create the ess-mode directory).

  See more in https://joaotavora.github.io/yasnippet/snippet-development.html

#+BEGIN_SRC emacs-lisp

(add-hook 'ess-mode-hook 'r-autoyas-ess-activate)
(yas-global-mode 1)

;; To allow for global activation of snippets
(add-hook 'yas-minor-mode-hook 
    (lambda ()
    (yas-activate-extra-mode 'fundamental-mode)))

#+END_SRC

* Hacks
** General
*** Multilingual functionality for wiki-summary

    In the file wiki-summary.el do the following:
    
    0. Comment out or delete the "defcustom wiki-summary-language-string" like this:
       #+BEGIN_SRC 
;; (defcustom wiki-summary-language-string "en"
;;  "Language string for the API URL call, i.e.: 'en', 'fr', etc.")
       #+END_SRC
    1. Replace the function wiki-summary/make-api-query with 
       #+BEGIN_SRC 
;;;multi-lingual version
;;;###autoload
(defun wiki-summary/make-api-query (s)
  "Given a wiki page title, generate the url for the API call
   to get the page info"

  (interactive)
  (require 'ido)
  (setq choices '(("English" . "en") ("Español" . "es") ("Français" . "fr")))

  "Prompt user to pick a choice from a list."
  (setq wiki-summary-language-string
	(cdr (assoc (ido-completing-read "Choose language:" choices) choices)))
  
  (let ((pre (format wiki--pre-url-format-string wiki-summary-language-string))
        (post wiki--post-url-format-string)
        (term (url-hexify-string (replace-regexp-in-string " " "_" s))))
    (concat pre term post)))

       #+END_SRC

    2. byte recompile the file wiki-summary.el

** Windows 7
*** Emacs
**** Version GNU Emacs 25.2.1 (x86_64-w64-mingw32)
      #+BEGIN_SRC emacs-lisp
      (when (memq system-type '(windows-nt ms-dos))
      (when (string= emacs-version "25.2.1")

      ;; Warning (python): Your python-shell-interpreter doesn’t seem... Removing aparently
      ;; useless warning using workaround https://github.com/syl20bnr/spacemacs/issues/8797
      (setq python-shell-completion-native-enable nil)

      ))
      #+END_SRC
